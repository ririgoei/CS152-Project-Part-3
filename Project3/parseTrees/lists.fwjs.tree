(prog (stat (expr var tru = (expr function (parameter ( x , y )) (block { (stat (expr x) ;) }))) ;) (stat (expr var fls = (expr function (parameter ( x , y )) (block { (stat (expr y) ;) }))) ;) (stat (expr var pair = (expr function (parameter ( x , y )) (block { (stat (expr function (parameter ( f )) (block { (stat (expr (expr f) (argument ( (expr x) , (expr y) ))) ;) })) ;) }))) ;) (stat (expr var fst = (expr function (parameter ( p )) (block { (stat (expr (expr p) (argument ( (expr tru) ))) ;) }))) ;) (stat (expr var snd = (expr function (parameter ( p )) (block { (stat (expr (expr p) (argument ( (expr fls) ))) ;) }))) ;) (stat (expr (expr var p = (expr pair)) (argument ( (expr 1) , (expr 2) ))) ;) (stat print ( (expr (expr fst) (argument ( (expr p) ))) ) ;) (stat print ( (expr (expr snd) (argument ( (expr p) ))) ) ;) (stat (expr var cons = (expr pair)) ;) (stat (expr var head = (expr fst)) ;) (stat (expr var tail = (expr snd)) ;) (stat (expr var isEmpty = (expr function (parameter ( lst )) (block { (stat (expr (expr lst) == (expr null)) ;) }))) ;) (stat (expr (expr var nums = (expr cons)) (argument ( (expr 1) , (expr (expr cons) (argument ( (expr 2) , (expr (expr cons) (argument ( (expr 3) , (expr (expr cons) (argument ( (expr 4) , (expr (expr cons) (argument ( (expr 5) , (expr (expr cons) (argument ( (expr 6) , (expr (expr cons) (argument ( (expr 7) , (expr (expr cons) (argument ( (expr 8) , (expr (expr cons) (argument ( (expr 9) , (expr (expr cons) (argument ( (expr 10) , (expr null) ))) ))) ))) ))) ))) ))) ))) ))) ))) ))) ;) (stat (expr var sumList = (expr function (parameter ( lst )) (block { (stat if ( (expr (expr isEmpty) (argument ( (expr lst) ))) ) (block (stat (expr 0) ;)) else (block (stat (expr (expr (expr (expr head) (argument ( (expr lst) ))) + (expr sumList)) (argument ( (expr (expr tail) (argument ( (expr lst) ))) ))) ;))) }))) ;) (stat print ( (expr (expr sumList) (argument ( (expr nums) ))) ) ;))
